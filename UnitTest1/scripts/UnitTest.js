//
// UnitTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
//
// Generated by DuoCode Compiler 0.3.878.0 BETA
//
(function UnitTest() {
"use strict";
var $asm = {
    fullName: "UnitTest",
    anonymousTypes: [],
    types: [],
    $getAttrs: function() {
        return [new System.Reflection.AssemblyTitleAttribute.ctor("UniTest"), new System.Reflection.AssemblyDescriptionAttribute.ctor(""), 
            new System.Reflection.AssemblyConfigurationAttribute.ctor(""), new System.Reflection.AssemblyCompanyAttribute.ctor(""), 
            new System.Reflection.AssemblyProductAttribute.ctor("UnitTest"), new System.Reflection.AssemblyCopyrightAttribute.ctor("Copyright \xA9  2015"), 
            new System.Reflection.AssemblyTrademarkAttribute.ctor(""), new System.Reflection.AssemblyCultureAttribute.ctor(""), 
            new System.Reflection.AssemblyVersionAttribute.ctor("1.0.0.0"), new System.Reflection.AssemblyFileVersionAttribute.ctor("1.0.0.0"), 
            new DuoCode.Runtime.CompilerAttribute.ctor("0.3.878.0 BETA")];
    }
};
var $g = (typeof(global) !== "undefined" ? global : window);
var UnitTest = $g.UnitTest = $g.UnitTest || {};
var $d = DuoCode.Runtime;
$d.$assemblies["UnitTest"] = $asm;
UnitTest.QUnitUtils = $d.declare("UnitTest.QUnitUtils", System.Object, 0, $asm, function($t, $p) {
    $t.$typeInfo = function(t, p) { return [1, null, [["Throws", t.Throws, 22]]]; };
    $t.Throws = function QUnitUtils_Throws(T, block) {
        QUnit.throws(block, $d.delegate(function(error) {
            return $d.typeOf(T).IsAssignableFrom($d.getTypeFromInst(error));
        }, this));
    };
});
UnitTest.TestAttribute = $d.declare("UnitTest.TestAttribute", System.Attribute, 0, $asm, function($t, $p) {
    $t.$typeInfo = function(t, p) { return [257, null, null, [["ctor", t.ctor, 6]], null, null, [new System.AttributeUsageAttribute.ctor(64)]]; };
    $t.ctor = function TestAttribute() {
        $t.$baseType.ctor.call(this);
    };
    $t.ctor.prototype = $p;
});
UnitTest.TestFixtureAttribute = $d.declare("UnitTest.TestFixtureAttribute", System.Attribute, 0, $asm, 
    function($t, $p) {
        $t.$typeInfo = function(t, p) { return [257, null, null, [["ctor", t.ctor, 6]], null, null, [new System.AttributeUsageAttribute.ctor(4)]]; };
        $t.ctor = function TestFixtureAttribute() {
            $t.$baseType.ctor.call(this);
        };
        $t.ctor.prototype = $p;
    });
UnitTest.TestRunner = $d.declare("UnitTest.TestRunner", System.Object, 0, $asm, function($t, $p) {
    $t.$typeInfo = function(t, p) { return [1, null, [["Run", t.Run, 22]]]; };
    $t.Run = function TestRunner_Run() {
        var assembly = $d.typeOf(UnitTest.TestRunner).get_Assembly();
        for (var $i = 0, $a = assembly.GetTypes(), $length = $a.length; $i != $length; $i++)
            (function() {
                var type = $a[$i];
                if (type.GetCustomAttributes$1($d.typeOf(UnitTest.TestFixtureAttribute), false).get_Count() > 0) {
                    System.Console.WriteLine$10(type.get_FullName());
                    for (var $i2 = 0, $a2 = type.GetMethods(), $length2 = $a2.length; $i2 != $length2; $i2++)
                        (function() {
                            var currentMethod = $a2[$i2];
                            if (currentMethod.GetCustomAttributes$1($d.typeOf(UnitTest.TestAttribute), 
                                false).get_Count() > 0) {
                                System.Console.WriteLine$10(currentMethod.get_Name());

                                var instance = type.GetConstructors()[0].Invoke$2($d.array(System.Object, 
                                    0));
                                QUnit.test(type.get_FullName() + "." + currentMethod.get_Name(), $d.delegate(function() {
                                    currentMethod.Invoke(instance, $d.array(System.Object, 0));
                                }, this));
                            }
                        }).call(this);
                }
            }).call(this);
    };
});
UnitTest.Tests = $d.declare("UnitTest.Tests", System.Object, 0, $asm, function($t, $p) {
    $t.$typeInfo = function(t, p) { return [257, null, [["AssemblyNameIsUnitTest", p.AssemblyNameIsUnitTest, 6, null, null, [new UnitTest.TestAttribute.ctor()]], ["ArraySortAndSearch", p.ArraySortAndSearch, 6, null, null, [new UnitTest.TestAttribute.ctor()]], ["GenericTypeInfo", p.GenericTypeInfo, 6, null, null, [new UnitTest.TestAttribute.ctor()]], ["IntegerMath", p.IntegerMath, 6, null, null, [new UnitTest.TestAttribute.ctor()]], ["InvalidCastThrowsException", p.InvalidCastThrowsException, 6, null, null, [new UnitTest.TestAttribute.ctor()]]], [["ctor", t.ctor, 6]], null, null, [new UnitTest.TestFixtureAttribute.ctor()]]; };
    $t.ctor = function Tests() {
        $t.$baseType.ctor.call(this);
    };
    $t.ctor.prototype = $p;
    $p.AssemblyNameIsUnitTest = function Tests_AssemblyNameIsUnitTest() {
        var assembly = $d.assemblyOf($asm);
        QUnit.equal(assembly.get_FullName(), "UnitTest");
    };
    $p.ArraySortAndSearch = function Tests_ArraySortAndSearch() {
        var array = $d.array(System.Byte, [6, 4, 2, 1, 5, 0, 3, 7]);
        Array.Sort$8(System.Byte, array);
        QUnit.deepEqual(array, $d.array(System.Byte, [0, 1, 2, 3, 4, 5, 6, 7]));
        QUnit.equal(Array.BinarySearch(System.Byte, array, 4), 4);
        QUnit.ok(Array.BinarySearch(System.Byte, array, 8) < 0);
    };
    $p.GenericTypeInfo = function Tests_GenericTypeInfo() {
        var tuple2Type = $d.typeOf(System.Tuple$2(System.Int32, String));
        QUnit.equal(tuple2Type.GetGenericTypeDefinition(), $d.typeOf(System.Tuple$2));
        QUnit.equal(tuple2Type.get_GenericTypeArguments().length, 2);
        var tuple2TypeArgs = tuple2Type.GetGenericArguments();
        QUnit.equal(tuple2TypeArgs.length, 2);
        QUnit.equal(tuple2TypeArgs[0], $d.typeOf(System.Int32));
        QUnit.equal(tuple2TypeArgs[1], $d.typeOf(String));
    };
    $p.IntegerMath = function Tests_IntegerMath() {
        var x = 200;
        QUnit.equal(x + x * 2, 600);
        QUnit.equal((x / 3 | 0), 66);
        QUnit.equal((x & 0xFF), 200);
        QUnit.equal($d.toInt8(x), -56);
    };
    $p.InvalidCastThrowsException = function Tests_InvalidCastThrowsException() {
        var doc = document;
        var window;

        QUnit.ok($d.typeOf(Node).IsAssignableFrom($d.getTypeFromInst(doc)));
        UnitTest.QUnitUtils.Throws(System.InvalidCastException, $d.delegate(function() {
            window = $d.cast(doc, Window);
        }, this)); // try to cast Document to Window
    };
});
return $asm;
})();
//# sourceMappingURL=UnitTest.js.map
